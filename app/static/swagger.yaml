openapi: 3.0.0
info:
  title: Zabka Go API
  description: Backend projektu "Żabka Go" na zaliczenie przedmiotu "Aplikacje Mobilne"
  version: 0.0.1
servers:
  - url: http://127.0.0.1:5000/v1/
    description: Local development server
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: session_token
tags:
  - name: Account
  - name: Achievement
  - name: Comment
  - name: Likes
  - name: Shop
  - name: User
  - name: Visit
paths:
  /login:
    post:
      summary: Authenticates user.
      description: Upon correct authentications returns newly generated session token and id of user.
      tags:
        - Account
      parameters:
        - in: query
          name: username
          required: true
          schema:
            type: string
        - in: query
          name: password
          required: true
          schema:
            type: string
            format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_token:
                    type: string
                    example: abcdefABCDEF123456789ghjklGHJKLxyzXYZabcABC=
                  status:
                    type: string
                    example: success
                  user_id:
                    type: integer
                    example: 1
        '401':
          description: Wrong login or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: wrong_password
                  status:
                    type: string
                    example: fail
  /register:
    post:
      summary: Creates new user.
      description: Takes username and password, verifies their validity and creates new user after passing all checks.
      tags:
        - Account
      parameters:
        - in: query
          name: username
          required: true
          schema:
            type: string
        - in: query
          name: password
          required: true
          schema:
            type: string
            format: password
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
              example:
                status: "success"
        '400':
          description: Login or password doesn't meet requirements.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "login_too_short"
                status: "fail"
        '409':
          description: Username is taken
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "username_taken"
                status: "fail"
  /shops:
    get:
      summary: Returns list of all Zabka shops.
      tags:
        - Shop
      responses:
        '200':
          description: Shops data was returned with no issues.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    long:
                      type: number
                    lat:
                      type: number
                    name:
                      type: string
                    description:
                      type: string
              example:
                - id: 1
                  long: 17.015884034062445
                  lat: 51.0940211383086
                  name: "Zabka"
                  description: "Zaporoska 42A, 53-416 Wrocław"
                - id: 2
                  long: 17.613560460684557
                  lat: 50.754277918741785
                  name: "Zabka"
                  description: "Moniuszki 59, 49-340 Lewin Brzeski"
  /shop/{shop_id}:
    get:
      summary: Returns data of single shop.
      tags:
        - Shop
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Shop data was returned with no issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  long:
                    type: number
                  lat:
                    type: number
                  name:
                    type: string
                  description:
                    type: string
              example:
                id: 1
                long: 17.015884034062445
                lat: 51.0940211383086
                name: "Zabka"
                description: "Zaporoska 42A, 53-416 Wrocław"
        '404':
          description: Shop not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "shop_not_found"
                status: "fail"
  /users:
    get:
      summary: Returns data of multiple users sorted by ranked points descending.
      description: Number of users is specified by count argument (default=50).
      tags:
        - User
      parameters:
        - in: query
          name: count
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Users data was returned with no issues.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    displayed_name:
                      type: string
                    ranking_points:
                      type: number
              example:
                - id: 2
                  name: "Krzysztof"
                  points: 10
                - id: 1
                  name: "Adam"
                  points: 5
  /user/{user_id}:
    get:
      summary: Returns data of single user.
      tags:
        - User
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User data was returned with no issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  displayed_name:
                    type: string
                  ranking_points:
                    type: number
              example:
                id: 2
                name: "Krzysztof"
                points: 10
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "user_not_found"
                status: "fail"
  /shop/{shop_id}/visit:
    post:
      summary: Sends information about shop visit.
      tags:
        - Visit
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User can visit shop again
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "visit_done"
                status: "success"
        '401':
          description: Token session was invalid or not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "no_session_token"
                status: "fail"
        '403':
          description: User is not allowed to visit shop again.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "visit_impossible"
                status: "fail"
        '404':
          description: Shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "shop_not_found"
                status: "fail"
    get:
      summary: Gets information whenever visiting shop is valid or invalid.
      tags:
        - Visit
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User can visit shop again
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "visit_possible"
                status: "success"
        '401':
          description: Token session was invalid or not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "no_session_token"
                status: "fail"
        '403':
          description: User is not allowed to visit shop again.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "visit_impossible"
                status: "fail"
        '404':
          description: Shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "shop_not_found"
                status: "fail"
  /user/{user_id}/visits:
    get:
      summary: Returns list of all shops visited by user.
      tags:
        - Visit
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User's visit data was returned with no issues.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    shop_id:
                      type: integer
                    date:
                      type: string
                      format: date
              example:
                - shop_id: 1
                  date: "2024-05-05"
                - shop_id: 2
                  date: "2024-05-04"
        '404':
          description: User was not found or he didn't visit any shops.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "visits_not_found"
                status: "fail"
  /shop/{shop_id}/comment:
    post:
      summary: Makes comment in shop discussion.
      tags:
        - Comment
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
        - in: query
          name: content
          required: true
          schema:
            type: string
        - in: query
          name: parent_id
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Comment addition was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
              example:
                status: "success"
        '400':
          description: Occurs when parent comment belongs to different shop discussion than shop with specified id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "shop_id_and_parent_id_mismatch"
                status: "fail"
        '401':
          description: Token session was invalid or not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "no_session_token"
                status: "fail"
        '403':
          description: User is not allowed to comment because he didn't visit the shop.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "shop_not_visited"
                status: "fail"
        '404':
          description: Shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "shop_not_found"
                status: "fail"
  /shop/{shop_id}/comments:
    get:
      summary: Returns all comments in shop discussion.
      tags:
        - Comment
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Users data was returned with no issues.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    user_id:
                      type: integer
                    parent_id:
                      type: integer
                    place_id:
                      type: integer
                    content:
                      type: string
                    creation_time:
                      type: string
                      format: date
              example:
                - content: "Testowy komentarz"
                  creation_time: "Tue, 07 May 2024 13:16:00 GMT"
                  id: 1
                  parent_id: 1
                  place_id: 4
                  user_id: 2
                - content: "Testowy podkomentarz"
                  creation_time: "Tue, 07 May 2024 13:21:53 GMT"
                  id: 2
                  parent_id: 1
                  place_id: 4
                  user_id: 2
        '404':
          description: Shop not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "shop_not_found"
                status: "fail"
  /shop/{shop_id}/comment/{comment_id}:
    get:
      summary: Return data of single comment in shop discussion.
      tags:
        - Comment
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
        - in: path
          name: comment_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Users data was returned with no issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  user_id:
                    type: integer
                  parent_id:
                    type: integer
                  place_id:
                    type: integer
                  content:
                    type: string
                  creation_time:
                    type: string
                    format: date
              example:
                content: "Testowy komentarz"
                creation_time: "Tue, 07 May 2024 13:16:00 GMT"
                id: 1
                parent_id: 1
                place_id: 4
                user_id: 2
        '404':
          description: Shop or comment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "comment_not_found"
                status: "fail"
  /shop/{shop_id}/like:
    get:
      summary: Returns information if user liked specific shop.
      tags:
        - Likes
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Like information was returned without issue.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                - status: "success"
                  message: "liked"
                - status: "success"
                  message: "not_liked"
        '403':
          description: User did not visit shop, therefore he can't like it.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                - status: "fail"
                  message: "shop_not_visited"
        '404':
          description: Shop does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                - status: "fail"
                  message: "shop_not_found"
    post:
      summary: Changes user's like status of specific shop.
      description: Removes like is shop was liked already, adds like otherwise.
      tags:
        - Likes
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Like status was changed with no issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                - status: "success"
                  message: "like_added"
                - status: "success"
                  message: "like_removed"
        '403':
          description: User did not visit shop, therefore he can't like it.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                - status: "fail"
                  message: "shop_not_visited"
        '404':
          description: Shop not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
              example:
                - status: "fail"
                  message: "shop_not_found"
  /shop/{shop_id}/likes:
    get:
      summary: Returns number of likes of specific shop.
      tags:
        - Likes
      parameters:
        - in: path
          name: shop_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Likes number was returned with no issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  shop_id:
                    type: integer
                  likes:
                    type: integer
              example:
                - shop_id: 1
                  likes: 15
        '404':
          description: Shop not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "shop_not_found"
                status: "fail"
  /achievement/{achievement_id}:
    get:
      summary: Returns data of single achievement.
      tags:
        - Achievement
      parameters:
        - in: path
          name: achievement_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Achievement data was returned with no issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
              example:
                id: 1
                name: "Pięć sklepów"
                description: "Odwiedź pieć sklepów"
        '404':
          description: Achievement not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "achievement_not_found"
                status: "fail"
  /achievements:
    get:
      summary: Returns data of all achievements.
      tags:
        - Achievement
      responses:
        '200':
          description: Achievements data was returned with no issues.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
              example:
                - id: 1
                  name: "Pięć sklepów"
                  description: "Odwiedź pieć sklepów"
                - id: 2
                  name: "10 punktów"
                  description: "Zdobądź dziesięć punktów"
  /user/{user_id}/achievements:
    get:
      summary: Returns list of all achievements obtained by user.
      tags:
        - Achievement
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User's achievement data was returned with no issues.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    achievement_id:
                      type: integer
              example:
                - achievement_id: 1
                - achievement_id: 2
        '404':
          description: User was not found or he didn't obtain any achievements.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
              example:
                message: "achievements_not_found"
                status: "fail"